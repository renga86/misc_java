import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Set;

import edu.princeton.cs.algs4.MinPQ;

class Employee {
	private int id;
	private String nm;
	
	public Employee(int id, String name) {
		this.setId(id);
		this.setNm(name);
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getNm() {
		return nm;
	}

	public void setNm(String nm) {
		this.nm = nm;
	}
	
	public String toString() {
		return "name: " + nm;
	}
}

class StringLen implements Comparator<String> {

	@Override
	public int compare(String o1, String o2) {
		if (o1.length() == o2.length()) return 0;
		else if (o1.length() > o2.length()) return 1;
		else return -1;
	}
}

class AlphaOrder implements Comparator<String> {

	@Override
	public int compare(String o1, String o2) {
		return o1.compareTo(o2);
	}
}

class RevOrder implements Comparator<String> {

	@Override
	public int compare(String o1, String o2) {
		return o2.compareTo(o1);
	}
}

public class App7 {

	/*static String[] findZeroSum2(int[] arr) {
        // Write your code here.
		int[] copy = Arrays.copyOf(arr, arr.length);
        Arrays.sort(copy);
        
        ArrayList<String> list = new ArrayList<String>();
		int[] arr1 = new int[3];
        for(int k = 0; k < copy.length; k++) {
            int elem = copy[k];
            for(int j = k+1; j < copy.length; j++) {
                    int Sum = elem + copy[j];
                    int mid = 0;
                    //sint[] arr2 = Arrays.copyOfRange(copy, j+1, copy.length);
                    //Arrays.sort(arr2);
                    	mid = BinarySearch(arr, -Sum, j+1, copy.length);
                    
                    //System.out.printf("Sum: %d\n", -Sum);
                    if (mid != -1) {
                    		arr1[0] = elem;
                    		arr1[1] = copy[j];
                    		arr1[2] = copy[mid];
                    		Arrays.sort(arr1);
                    		String items = "";
                    		for (int m = 0; m < arr1.length; m++) {
                    			if (m+1 == arr1.length) {
                    				items = items + Integer.toString(arr1[m]);
                    			} else {
                    				items = items + Integer.toString(arr1[m]) + ",";
                    			}
                    		}
                        // Prevent Duplicates
                        if (!(list.contains(items)))
                            list.add(items);
                    }
                }
        }
        
        return list.toArray(new String[list.size()]);
    }*/
	
	/*static String[] findZeroSum(int[] arr) {
		int[] copy = Arrays.copyOf(arr, arr.length);
        Arrays.sort(copy);
        
        Set<String> list = new LinkedHashSet<String>();
        for(int k = 0; k < copy.length-2; k++) {
            int elem = copy[k];
            for(int j = k+1; j < copy.length-1; j++) {
                    int Sum = elem + copy[j];
                    int mid = BinarySearch(copy, -Sum, j+1, copy.length);
                    if (mid != -1) {
                    		String items = Integer.toString(elem) + "," + Integer.toString(copy[j]) + "," + Integer.toString(copy[mid]);
                        // Prevent Duplicates
                        list.add(items);
                        
                        //for(String s: list)
                    }
            }
        }
        
        return list.toArray(new String[list.size()]);
    }*/
	
	static List<List<Integer>> findZeroSum(int[] arr) {
		List<List<Integer>> list = new LinkedList<List<Integer>>();
		int[] copy = Arrays.copyOf(arr, arr.length);
		Arrays.sort(copy);

		for(int k = 0; k < copy.length-2; k++) {
			if (k == 0 || (k > 0 && copy[k] != copy[k-1])) {
				int low = k + 1, high = copy.length - 1;
				int sum = 0 - copy[k];
				while (low < high) {
					if (copy[low] + copy[high] == sum) {
						List<Integer> list1 = new LinkedList<Integer>();
						list1.add(copy[k]);
						list1.add(copy[low]);
						list1.add(copy[high]);
						list.add(list1);
						while (low < high && copy[low] == copy[low+1]) low ++;
						while (low < high && copy[high] == copy[high-1]) high--;
						low++; high--;
					} else if (copy[low] + copy[high] < sum) {
						low++;
					} else {
						high--;
					}	
				}
			}
		}

		return list;

	}

    static int BinarySearch(int[] arr, int target, int start, int end) {
    		int low = start, high = end-1;
    		while (low <= high) {
			int mid = low + (high -low) / 2;
			if (arr[mid] == target) return mid;
			else if (target < arr[mid]) high = mid - 1;
			else low = mid + 1;
		}
		
		return -1;
    }
    
    static int fibonacci(int n) {
  	  System.out.printf("%d\t", n);
    	  if (n == 0)
    	    return 0;
    	  if (n == 1)
    	    return 1;
    	  
    	  return fibonacci(n-1) + fibonacci(n-2);
    	}
    
    static int bunnyEars2(int bunnies) {
    		  System.out.printf("%d\t", bunnies);
	    	  if (bunnies == 0) {
	    	    return 0;
	    	  }
	    	  
	    	  if (bunnies % 2 == 0) {
	    	    return 3 + bunnyEars2(bunnies - 1);
	    	  } else {
	    	    return 2 + bunnyEars2(bunnies - 1);
	    	  }
    	}
    
    static int printStr(String str) {
    	  
    	  if (str == null || str == "") {
    		  return 0;
    	  }
    	  
    	  return printStr(str.substring(1));
    	}
    

    public boolean array6(int[] nums, int index) {
    	  
    	  if (index < 0 || index == nums.length)
    	    return false;
    	  
    	  array6(nums, index+1);
    	  for (int i = index; i < nums.length; i++) {
    	    if (nums[i] == 6) {
    	        return true;
    	    }
    	  }
    	  
    	  return false;
    	}

    static int countX(String str) {
    	  
    	  if (str == null || str.length() == 0) {
    	    return 0;
    	  }
    	  
    	  //System.out.println(str);
    	  if (str.length() >= 2 && str.charAt(0) == 'h' && str.charAt(1) == 'i')
    	     return 1 + countX(str.substring(1));
    	  else
    	    return countX(str.substring(1));
    	}

	
	/*static String[] findZeroSum(int[] arr) {
        // Write your code here.
        //Arrays.sort(arr);
        int[] arr1 = new int[3];
        ArrayList<String> list = new ArrayList<String>();
        for(int k = 0; k < arr.length-1; k++) {
            int elem = arr[k];
            for(int j = k+1; j < arr.length; j++) {
                for(int i = j+1; i < arr.length; i++) {
                    if (arr[i] + arr[j] + elem == 0) {
                    		//System.out.println(" Elem ");
                    		arr1[0] = elem;
                    		arr1[1] = arr[j];
                    		arr1[2] = arr[i];
                    		Arrays.sort(arr1);
                    		String items = "";
                    		for (int m = 0; m < arr1.length; m++) {
                    			if (m+1 == arr1.length) {
                    				items = items + Integer.toString(arr1[m]);
                    			} else {
                    				items = items + Integer.toString(arr1[m]) + ",";
                    			}
                    		}
                    	// Prevent Duplicates
                    if (!(list.contains(items)))
                        list.add(items);
                    }
                }
            }
        }
        
        return list.toArray(new String[list.size()]);
    }*/
    

    /*static int BinarySearch(int[] arr, int target, int start, int end) {
    		
    		int low = start, high = end-1;
    		int mid = 0;
    		while (low <= high) {
			mid = low + (high -low) / 2;
			if (target == 1) {
    				System.out.printf(" %d %d %d %d\n", low, high, mid, arr[mid]);
    			}
			if (arr[mid] == target) return mid;
			else if (target < arr[mid]) high = mid - 1;
			else low = mid + 1;
		}
    		
		
		return -1;
    }*/
    
    static String[] solve(String[] arr) {
        /*
         * Write your code here.
         */
    	    HashMap<String, String> strMap = new HashMap<String, String>();
    	    HashMap<String, Integer> intMap = new HashMap<String, Integer>();
    		List<String> res = new ArrayList<String>();
        for(int i = 0; i < arr.length; i++) {
            String[] parts = arr[i].split(" ");
            if (strMap.containsKey(parts[0])) {
            		String val = strMap.get(parts[0]);
            		int val1 = intMap.get(parts[0]) + 1;
            		intMap.put(parts[0], val1);
            		int retVal = compareStrings(val, parts[1]);
            		if (retVal < 1)
            			strMap.put(parts[0], parts[1]);
            } else {
            		strMap.put(parts[0], parts[1]);
            		intMap.put(parts[0], 1);
            }
        }
        
        List<String> sortedKeys = new ArrayList<String>(strMap.keySet());
        Collections.sort(sortedKeys);
        
        for(int i = 0; i < strMap.size(); i++) {
        		String key = sortedKeys.get(i);
        		String strVal = strMap.get(key);
        		int cnt = intMap.get(key);
        		String output = key + ":" + cnt + "," + strVal;
        		res.add(output);
        }
        
        return res.toArray(new String[res.size()]);
    }
    
    static int compareStrings(String existString, String newString) {
    		return existString.compareTo(newString);
    }
    
	
	/*static int[] mergeArrays(int[][] twoArr) {
        boolean flag = false;
        int[] outArr = new int[0];
        for(int i = 0; i < twoArr.length;) {
			if (i == 0) {
				if (twoArr[i][0] < twoArr[i][twoArr[i].length-1]) {
					flag = true;
				} else {
					flag = false;
				}
				outArr = new int[twoArr[i].length*2];
				mergeArrays(twoArr[i], twoArr[i+1], outArr, flag);
				i = i+2;
			} else {
				int[] tmpArr = new int[outArr.length];
				tmpArr = Arrays.copyOf(outArr, outArr.length);
				outArr = new int[twoArr[i].length+outArr.length];
				mergeArrays(twoArr[i], tmpArr, outArr, flag);
				i++;
			}
		}
        
        return outArr;
    }*/

    static void mergeArrays(int[] inpArr1, int[] inpArr2, int[] outArr, boolean flag) {
		int index = 0;
		int size1 = 0, size2 = 0;
		int endSize1 = inpArr1.length, endSize2 = inpArr2.length;
		
		while(size1 >= 0 && endSize1 > 0 && size2 >= 0 && endSize2 > 0 && (size1 < inpArr1.length) && (size2 < inpArr2.length)) {
            if (flag) {
			     if (inpArr1[size1] <= inpArr2[size2]) {
				    outArr[index++] = inpArr1[size1++];
			     } else {
				    outArr[index++] = inpArr2[size2++];
			     }
            } else {
                if (inpArr1[size1] >= inpArr2[size2]) {
					outArr[index++] = inpArr1[size1++];
				} else {
					outArr[index++] = inpArr2[size2++];
				}
            }
		}
		while(size1 < inpArr1.length) {
			outArr[index++] = inpArr1[size1++];
		}
		while(size2 < inpArr2.length) {
			outArr[index++] = inpArr2[size2++];
		}
	}
    
    static void merArrays(int[] inpArr1, int[] inpArr2, int[] outArr) {
    		int size1 = 
    		PriorityQueue<Integer> queue = new PriorityQueue<>();
    		while(size1 >= 0 && endSize1 > 0 && size2 >= 0 && endSize2 > 0 && (size1 < inpArr1.length) && (size2 < inpArr2.length)) {
    			     if (inpArr1[size1] <= inpArr2[size2]) {
    				    outArr[index++] = inpArr1[size1++];
    			     } else {
    				    outArr[index++] = inpArr2[size2++];
    			     }
    		}
    		while(size1 < inpArr1.length) {
    			outArr[index++] = inpArr1[size1++];
    		}
    		while(size2 < inpArr2.length) {
    			outArr[index++] = inpArr2[size2++];
    		}
    }
    
    static boolean palindrome(String str) {
    		int i = 0, j = str.length()-1;
    		return paliRecur(str, i, j);
    }
    
    static boolean paliRecur(String str, int i, int j) {
    		if (str == null || str.length() == 0 || i == j)
    			return true;
    		
    		//System.out.printf("%d %d\n", i, j);
    		while ((str.charAt(i) == '.' || str.charAt(i) == ',' ||
    				str.charAt(i) == '!' || str.charAt(i) == '-' || str.charAt(i) == ';' || str.charAt(i) == ':' || str.charAt(i)== '\'' || str.charAt(i) == '"')) {
    			i++;
    		}
    		while ((str.charAt(j) == '.' || str.charAt(j) == ',' ||
			str.charAt(j) == '!' || str.charAt(j) == '-' || str.charAt(j) == ';' || str.charAt(j) == ':' || str.charAt(j)== '\'' || str.charAt(j) == '"')) {
    			j--;
    		}
    		if (str.charAt(i) == str.charAt(j)) {
    			//System.out.printf("Inside loop: %d %d\n", i, j);
    			paliRecur(str, i++, --j);
    		} else {
    			return false;
    		}
    		
    		return true;
    }

    static boolean groupSum(int start, int[] nums, int target) {
    	  System.out.printf(" %d\n", target);
    	  
    	  if (target == 0) {
    		  return true;
    	  }
    	      	  
    	  if (target > 0) {
        	  groupSum(start + 1, nums, target - nums[start]);
    	  } else {
    		  groupSum(start + 1, nums, target);
    	  }
    	  
    	  return false;
    	}

	public static void main(String args[]) {
		/*List<String> anmls = new ArrayList<String>();
		
		anmls.add("cat");
		anmls.add("dog");
		anmls.add("mouse");
		anmls.add("elep");
		anmls.add("tiger");
		anmls.add("fox");

		//Collections.sort(anmls, new StringLen());
		//Collections.sort(anmls, new AlphaOrder());
		Collections.sort(anmls, new RevOrder());
		
		for(String key: anmls) {
			System.out.println(key);
		}
		
		List<Employee> emp = new ArrayList<Employee>();
		emp.add(new Employee(1, "John"));
		emp.add(new Employee(4, "And"));
		emp.add(new Employee(3, "Sha"));
		emp.add(new Employee(2, "Ma"));
		
		Collections.sort(emp, new Comparator<Employee>() {
			
			public int compare(Employee p1, Employee p2) {
				if (p1.getId() > p2.getId()) return 1;
				else if (p1.getId() < p2.getId()) return -1;
				
				return 0;
			}
		});
		
		for(Employee emp1: emp) {
			System.out.println(emp1);
		}*/
		
		//int[] arr = {2000,-516,-59,484,-212,244,80,275,-515,78,-193,272,-288,220,-287,-36,184,396,18,-100,245,576,-479,-295,208,-183,-103,513,626,-514,328,12,454,-297,-508,-502,-173,274,737,952,-892,320,-627,87,305,357,-674,493,612,-100,272,411,351,506,113,-681,241,272,-266,72,110,290,-132,-801,141,-956,-576,-551,280,-95,433,-410,-768,-652,179,222,-256,-73,82,784,743,248,-524,-173,495,103,504,759,537,1,474,42,-72,-341,391,331,-109,-3,-228,379,-900,916,72,-336,-36,803,-122,-719,93,-380,-628,-226,681,-500,376,31,-282,-330,494,153,929,189,-3,117,585,165,-511,-437,72,391,775,-89,534,240,-284,-125,390,-404,-176,-810,881,-356,116,-777,-488,-28,-287,-907,-420,-375,-294,-426,214,292,6,-197,-208,-215,-15,-252,170,420,135,310,247,-41,184,-502,-480,711,-64,470,-148,-138,436,-39,-26,-417,129,-324,400,5,62,-395,-22,-155,-571,-220,806,-88,-145,-16,-349,-197,630,-576,-602,353,-14,58,158,-346,-74,384,237,170,-15,-25,187,331,183,47,571,4,-513,688,-60,-391,-476,120,226,610,780,-137,-260,-307,-468,-908,172,422,-77,213,852,598,228,-36,-28,-367,221,407,-497,195,252,244,-204,662,38,628,13,-682,-136,189,-724,-889,7,247,683,378,-248,386,561,108,674,-212,760,-623,-784,-77,802,155,16,49,-296,-164,-40,428,-541,506,-628,-236,820,-226,-197,-19,-506,69,-320,-948,-281,57,-325,-629,371,-50,799,51,707,-201,378,157,662,-89,345,294,96,-271,17,-114,105,-455,161,357,642,-591,165,-39,-67,174,-607,-511,163,139,300,103,-116,58,275,358,-461,223,650,177,-622,-627,609,213,-185,-193,67,-85,622,609,-195,-183,-361,503,645,38,-661,50,-64,-142,-339,-393,76,-724,100,-120,-266,-228,-765,122,178,152,-661,-146,727,-25,157,73,-599,-6,-335,-355,663,-497,-502,-434,507,-522,296,457,557,13,-75,-274,-70,-67,395,17,222,52,425,230,-352,-312,259,65,-301,572,-464,-531,814,-628,26,-652,7,16,-453,562,448,-832,-85,193,529,219,-4,110,-433,-248,-584,92,278,582,222,126,813,-364,-503,-41,-537,-286,226,-277,138,-169,-69,-84,-99,-68,-134,-778,124,-476,-123,60,475,-613,-30,378,258,461,-205,-190,-372,-294,322,-400,710,-542,463,808,392,-212,259,-476,-379,518,-359,-65,-30,-614,-63,277,-42,-884,117,-646,164,37,-738,-136,451,132,-251,-118,193,361,67,-59,600,-669,-711,874,512,-608,-781,471,173,-185,54,69,-298,-6,-786,-577,655,566,-428,-117,-276,-333,-16,-431,-100,-112,-379,438,-492,-293,91,-564,472,-74,355,-96,295,-170,-207,-211,-251,228,418,-299,440,-43,-223,300,77,-173,-783,701,-214,-774,-678,-252,506,-164,244,243,485,56,9,-530,-370,-141,28,440,276,359,508,-611,-60,146,516,335,873,-190,388,59,-237,377,-299,-462,166,-268,89,-719,456,547,241,-238,-347,-89,-217,266,-437,-44,-5,-741,-200,138,344,176,296,730,-612,-227,784,-357,244,-12,-737,-333,-505,585,-271,337,-185,-679,596,230,-19,437,339,-457,170,448,-426,-26,481,207,-71,-40,105,-187,282,733,164,-436,246,493,-142,192,545,86,120,-948,-414,456,60,532,-267,250,-529,442,80,331,-92,-327,-400,-293,-300,-585,-342,-335,-608,-379,-348,-269,-167,-50,442,218,648,398,747,-179,-241,177,722,-567,-321,104,-626,673,369,-551,748,-319,-467,542,-216,3,-161,889,-647,-485,335,-193,692,-108,29,146,901,-110,-252,-305,218,582,-331,376,-32,206,256,520,-210,-38,280,-742,253,371,-515,-365,-537,325,-904,-923,-330,-791,787,12,-694,-146,-88,42,743,-693,-225,-550,-423,105,-207,498,445,133,424,-494,-317,-610,14,-200,-210,174,-886,-380,-780,369,-225,-179,-589,-47,127,723,95,-92,-576,539,-90,104,176,-471,-252,-577,339,429,480,-43,718,95,-553,-19,-118,54,-283,147,199,-256,-719,-80,277,206,318,179,209,228,11,-189,0,-152,-116,255,103,25,136,415,-123,-52,-301,529,123,750,178,-139,357,175,-85,-388,353,-11,675,874,481,-239,-361,680,-359,-503,-27,-323,463,118,152,185,357,-276,-159,-807,20,-674,-949,279,-73,143,690,673,670,4,-329,430,-86,-347,-589,94,-147,-168,630,-201,208,-632,-827,90,323,-560,628,-132,201,186,-463,247,474,-711,-262,128,97,-789,-334,103,-290,-175,273,-301,-310,-633,-541,732,654,-342,116,385,197,617,-253,337,-258,530,-290,51,-876,257,808,359,719,111,350,371,601,-182,-464,-648,-212,-397,-694,-29,376,-211,-383,30,-130,101,290,-426,544,-275,-271,531,176,737,518,292,-107,107,197,-23,106,-23,-206,-119,-216,106,573,-221,-872,430,297,-59,-452,-363,-260,-199,69,-565,508,148,-445,-172,717,-457,-17,553,140,127,-35,-559,-392,374,-156,531,77,-359,-74,222,72,-392,-476,300,-153,-622,-48,551,-793,-632,-142,252,-618,622,-237,428,127,366,-330,141,218,285,-349,120,762,-395,-260,90,878,59,26,-692,443,-184,342,380,-316,-486,-327,243,8,856,-788,-530,-362,185,11,-184,329,103,251,-150,5,326,712,498,-517,431,539,-767,-10,-15,421,-67,-318,-54,126,719,-41,211,25,131,809,483,286,-508,-92,-40,-231,-283,-280,738,-505,274,-208,-735,-124,279,-846,219,16,316,587,240,102,32,344,55,-155,-180,-624,-345,-408,301,-425,632,271,-260,-230,776,453,-43,222,312,289,477,665,-377,-403,-451,471,-22,-388,177,24,122,93,93,-266,358,251,52,601,94,53,145,451,121,23,-666,-699,836,512,576,818,98,-231,98,631,230,118,-2,-565,-557,230,177,98,639,363,581,34,-303,423,222,-561,248,121,-81,687,51,108,-773,-409,-158,-783,-570,-307,-524,504,-710,741,41,165,-109,510,463,167,-325,-556,470,552,-64,-196,13,481,635,492,-133,-229,24,-199,-216,-809,-422,0,-45,-24,-339,-393,-230,-138,-644,146,-362,770,-15,208,-746,615,64,-444,-313,347,53,109,-420,481,-333,-905,-558,-469,28,569,-800,786,-571,-449,629,255,-49,-505,-645,547,-255,221,-363,327,217,-49,-90,588,431,-286,-172,-604,468,364,-171,17,-475,209,50,306,186,-512,-95,171,-111,197,163,699,-364,-451,245,21,-608,630,496,-656,-83,-580,73,320,465,183,-685,684,542,57,113,-74,121,362,-115,128,-238,53,262,-38,464,-624,-710,63,-285,2,-78,286,65,-90,-276,809,-573,249,496,-590,709,722,67,-854,51,6,-241,195,-113,-351,-765,-780,14,-312,-818,568,129,59,29,-136,158,-275,-846,61,-403,11,-117,49,27,124,944,-652,356,84,-17,104,314,-576,-39,-99,832,-730,-181,47,395,859,-497,-188,-531,468,-431,73,-334,-97,-180,-197,-717,240,-92,31,318,-458,530,67,965,580,949,-829,-269,-518,-172,-769,525,-174,14,432,252,108,-150,-256,-357,12,-175,119,-312,575,-799,-56,-123,-684,-655,179,-269,446,208,178,-39,115,214,285,728,-390,506,70,147,205,596,16,670,-124,-103,609,-124,418,27,-419,-222,-521,280,-741,873,-562,-329,430,507,333,151,-242,-761,-319,-191,22,-178,224,354,-146,-388,285,556,-90,171,-687,683,-391,833,367,160,-976,302,-580,146,53,94,110,352,-9,-682,705,-150,402,312,165,-729,-675,279,-668,61,82,191,-171,-42,-197,-29,733,118,816,-306,-542,22,-733,-900,-472,-650,-67,-89,-148,-356,-249,-165,365,543,-509,27,-97,-401,67,234,-209,-413,-235,-131,659,-6,-163,613,-392,-396,-259,-161,364,-96,-836,197,-318,-211,235,242,377,-246,-666,115,-433,310,355,-343,-160,89,-521,232,673,-77,-577,-435,776,-863,440,122,257,348,200,81,275,-653,698,-80,355,582,504,183,-51,298,619,404,15,216,250,265,-273,-297,417,-238,-367,-19,447,-48,427,-341,-641,-143,369,-73,-878,183,-718,530,-56,389,394,-103,324,-576,504,53,-314,176,262,-716,-601,-500,-307,-330,385,492,56,114,-58,214,-132,-33,-202,202,-424,-507,-422,95,-1,210,93,-195,104,15,335,754,-176,466,280,-193,-540,-302,-261,-39,273,680,-143,353,-115,242,379,-27,-452,-1,-197,15,324,-259,426,634,-405,334,63,233,-99,80,823,248,-97,522,-23,681,464,188,-450,-711,-148,-163,0,586,120,19,-337,56,755,-25,-313,533,160,-120,391,207,533,460,648,-114,928,-301,38,-401,357,-563,-225,277,123,464,-746,-173,229,-212,-412,-243,-110,136,-679,-404,207,-733,369,-689,-759,-220,-470,246,486,477,-47,509,-287,-63,-165,-63,-399,466,29,35,-917,-394,54,175,61,37,31,58,59,-41,51,324,-53,-95,-38,418,513,4,93,-713,836,-377,-57,128,433,-567,-121,-114,-732,770,-376,36,-509,207,371,-497,-164,369,-312,-864,538,240,-406,-442,333,-134,649,248,-256,62,-321,-4,-166,557,-52,308,624,-124,50,133,-378,-485,27,271,-263,106,135,-72,552,-431,-696,283,-48,-180,-288,490,-10,758,-673,257,-10,-77,213,-404,-146,-220,-202,-380,-500,-63,-357,-98,-731,391,-893,509,158,-520,-422,-699,107,433,-137,16,-108,219,412,296,-363,-549,74,61,-535,-726,171,652,497,247,-24,-698,-201,393,-630,58,452,895,-333,-322,-215,-72,515,283,326,557,372,510,-361,-604,87,-749,-502,-284,-499,-62,180,-396,-384,49,-502,-101,-135,554,321,298,321,-255,-415,-288,193,81,395,-380,-206,-275,582,-69,720,-752,-232,47,872,294,134,790,-673,226,805,-408,587,-185,-415,-429,-161,432,10,-184,-155,266,195,68,-83,-274,259,320,337,-256,-107,-812,-135,-212,760,-691,192,453,-559,427,-738,-179,196,839,-148,808,-17,-179,-588,-438,385,-561,336,-106,-67,179,-72,190,-807,-511,470,-194,-166,-257,-6,363,-282,-299,118,645,-463,171,-108,514,25,-577,-116,491,-139,890,137,494,-153,472,298,100,390,356,-534,-296,550,59,321,-193,-610,389,945,300,-21,-408,-325,24,65,-363,313,-391,-50,59,-333,-334,-705,832,747,180,-6,501,-118,-451,164,-425,-94,-90,81,-760,802,91,-183,605,-113,79,-282,86,87,-546,-521,-798,-580,-148,-463,577,208,490,137,826};
		//int[] arr = {2000,-156,-21,197,262,347,480,22,-513,151,-105,-266,-732,695,377,209,-49,-133,42,549,745,-67,-612,45,16,28,-545,-235,18,680,-241,-86,-460,859,-305,464,-290,-157,-24,403,-348,-302,381,-785,-433,-137,696,113,-228,-21,-134,302,337,-362,-632,-408,565,97,-774,-27,-2,-781,234,-23,241,-146,3,207,-283,-560,-271,-419,89,178,44,-338,764,13,-561,-545,-743,-655,-29,108,145,-267,4,225,-350,275,116,-606,282,107,725,-340,-33,-268,-8,635,-834,665,274,131,55,-714,291,-615,-120,-17,253,-200,-296,675,476,133,-742,-103,466,549,521,162,-480,-285,543,287,-455,-140,325,-311,-58,-285,39,326,459,423,646,103,594,-160,542,461,77,-217,374,64,350,-315,-4,552,80,118,896,-59,-109,-695,173,8,-516,568,35,-399,252,-160,369,184,237,-394,84,-3,-429,-91,363,-176,-458,241,-595,459,-80,-201,-306,380,78,-332,135,53,528,371,-261,-515,-247,-695,-341,326,-574,10,603,-10,-656,-558,12,-713,-124,45,458,-520,622,664,-51,-71,571,207,177,757,268,-418,349,498,285,-118,-278,200,334,30,-381,447,298,848,-746,-7,-317,-414,-636,-202,100,-846,-287,-348,472,-260,77,85,198,-893,355,619,-460,485,-130,-254,-518,-35,320,-51,571,760,523,269,897,26,209,-855,-585,-345,124,-480,-146,-21,-703,-331,233,-21,333,-3,314,-357,-464,548,-284,112,351,231,328,-171,433,-183,177,-113,651,-488,201,-551,29,141,-13,-80,149,-481,304,441,-7,209,227,-672,-418,-278,-257,-72,123,-246,580,199,-112,241,-769,161,-543,-376,816,441,-187,358,-110,212,74,-316,-128,430,215,-108,130,-380,-295,187,302,-399,208,115,187,162,-63,581,-731,356,777,-169,-835,106,-318,67,-129,-583,239,745,-557,-268,-369,-415,-51,-56,-103,20,-98,146,-206,-7,481,-425,-39,464,-184,65,558,356,182,596,92,778,-603,15,738,660,214,84,497,-479,-44,224,396,-502,242,759,-734,-111,-30,430,-181,-325,-91,129,-132,195,-113,179,587,255,64,-431,-434,545,28,257,-420,208,438,556,515,326,127,73,-582,-399,248,-61,366,282,365,-194,-659,-406,-151,-313,775,-503,325,-62,0,279,-422,444,-711,-115,485,487,47,818,214,105,719,-306,-879,199,-888,-781,135,251,361,152,234,59,-392,-106,-74,418,-502,500,4,-370,-433,-364,-146,370,349,749,-530,697,377,-577,-472,890,-357,-301,-84,-408,151,-254,254,288,-627,171,80,-76,-349,-490,-413,-382,726,492,-677,870,-609,-635,465,244,353,-110,-369,488,-404,34,-263,760,367,109,-424,39,-2,-323,-307,400,353,689,-99,-391,382,-357,529,-442,515,-672,130,499,-82,258,-595,299,782,235,337,228,-384,208,810,627,-573,156,67,74,-370,-11,-338,230,-106,-355,91,-517,-14,3,215,-426,-401,-232,419,-228,6,-755,-599,-489,-86,-328,524,-195,-140,116,-314,-511,360,-137,600,-15,-874,-582,110,-65,700,-131,570,225,255,-895,-347,211,77,-114,371,-39,-185,-580,254,-585,481,-517,-122,-102,-111,-44,145,-411,-738,-187,253,308,-145,258,-121,22,281,50,-375,292,203,803,-843,-579,-172,47,-67,307,280,206,322,348,-121,474,-310,82,558,608,644,-164,-428,-630,-445,69,432,-608,25,681,192,-661,161,772,592,417,-364,891,-102,-27,391,210,601,502,-487,-35,-707,61,86,-655,-356,817,375,376,747,-454,352,498,-166,210,259,448,14,-504,129,552,-218,-92,-395,-106,705,-336,-351,237,11,-110,-353,779,-364,404,770,-358,-182,-163,-204,201,-717,767,151,164,5,-768,630,-44,-402,721,-222,472,125,68,302,-163,640,-729,-429,-628,-627,-325,-26,-619,292,784,-385,17,400,215,97,175,90,-383,-18,-71,95,499,-688,404,-250,-256,-510,-451,356,455,-377,944,272,-86,31,448,-695,-200,77,684,-349,441,508,-252,39,133,326,-760,227,70,-258,-452,-349,186,-116,89,-530,-165,-132,70,43,1,137,400,785,554,-525,-31,-396,290,325,790,44,6,834,-76,336,-103,-196,-497,-141,305,62,-789,678,-58,-480,-717,-409,123,-618,-124,-20,-235,-46,-99,-358,567,215,838,841,408,-347,478,-211,-8,-327,192,296,-128,114,81,756,-369,-58,253,-349,447,269,816,-640,735,-487,-657,572,71,213,-666,27,504,292,72,-163,155,-154,122,311,406,632,-615,-687,379,2,81,-154,-397,-25,-107,407,-436,138,-741,82,279,532,127,-707,-147,-520,331,-251,21,-423,-418,-318,-631,-328,-5,305,-295,751,-81,-271,635,-639,317,0,298,-23,282,565,-211,-169,146,-243,-124,-248,145,14,-329,-4,357,735,-600,-290,-703,-505,-474,217,-88,148,112,-425,-400,-181,528,657,-475,-589,-625,-734,114,-470,755,-459,-491,-281,-659,-284,162,-840,534,320,-557,51,358,-219,535,-730,-595,-324,754,359,164,-185,310,-818,322,-662,-671,615,759,189,704,392,733,-188,109,466,-428,-720,-74,-198,-446,37,-202,-482,-15,555,76,-308,322,31,-592,771,28,664,-358,832,840,-638,-85,-542,-595,152,-190,344,84,795,-390,111,318,-378,55,294,826,-358,134,-206,553,-5,-308,-661,91,-622,123,174,-952,569,873,-229,2,676,-767,239,166,147,-288,271,408,-773,515,-149,-611,-444,-523,121,270,248,-430,159,629,355,408,-613,-823,485,26,307,882,139,-276,-617,64,-618,-565,19,317,32,-421,-169,-304,107,641,24,608,-398,359,-756,511,118,-333,-637,470,-413,41,619,739,650,-691,-912,56,566,516,523,-84,104,82,-344,128,-195,-758,-313,539,844,458,-315,424,-48,-555,897,-355,-163,568,-463,19,444,558,83,-407,-41,158,-394,-318,585,497,88,-444,219,53,-122,271,-166,-378,-768,173,-123,-896,-101,460,479,-200,-730,-457,84,-151,439,188,285,569,44,261,444,-70,-292,72,-100,75,116,-256,326,629,-748,-133,190,207,233,-270,-474,-220,25,237,-129,-912,315,-82,340,312,142,323,-225,-25,46,108,402,331,339,228,88,-40,-470,-223,-333,49,619,475,173,363,795,-708,-440,219,-343,-629,63,-501,-215,144,-116,-286,-195,-115,337,171,160,-375,-159,57,74,-732,-276,754,-63,-403,-705,-518,59,87,340,-828,61,794,-253,-481,255,-171,248,20,623,568,-203,-23,-644,-300,-684,690,-653,41,95,-93,810,215,-7,-431,-393,111,260,47,26,-766,274,146,528,477,-578,479,-257,-405,193,-279,118,-28,494,565,-196,-193,-385,-298,-131,366,-554,82,354,-624,54,244,286,-410,-686,-735,-29,615,-670,-643,43,-372,-311,20,192,278,250,435,-114,588,135,-316,29,55,915,423,81,952,-434,293,410,-715,60,340,-73,-144,440,-48,355,-839,-151,99,-585,904,342,-531,1,309,-508,-79,22,217,-486,-623,-258,380,15,-508,-347,-66,78,117,468,567,-477,-128,-209,-473,-266,610,148,16,-902,-569,467,313,58,387,298,609,-152,-446,-210,-413,-243,363,-73,85,-300,94,-583,-552,879,697,77,237,274,304,-217,-749,357,-134,-266,-60,483,-817,-592,69,-24,205,-884,-398,347,-334,424,121,-25,-280,-551,-102,-327,91,-273,-392,-711,153,-33,136,537,414,-96,187,-476,-923,232,-53,189,-613,309,159,533,-3,86,-698,-442,278,-191,244,508,-502,195,901,-465,-74,109,-61,-741,-65,745,191,-463,-89,42,-640,-132,549,-197,-232,215,700,-300,-275,451,408,-327,-256,-165,37,235,-686,264,-256,-18,43,717,29,-22,548,-363,-479,-579,-574,330,142,20,546,21,-446,686,368,377,-471,-422,631,170,192,-131,230,-850,-151,-459,-234,-324,651,753,670,-412,-96,537,848,-273,535,160,227,-54,-647,519,48,-82,-293,802,118,-539,-245,416,-441,232,-859,720,241,596,26,-192,-258,50,51,133,390,19,-568,-112,545,-204,-14,53,-120,228,392,-487,-247,-264,-231,-690,183,144,97,-176,450,320,-147,325,40,-438,-192,-308,-6,151,207,218,186,-29,173,-417,-41,31,488,625,-47,429,92,-83,617,9,-276,395,6,116,652,135,-223,-71,-917,-535,-365,288,106,335,-292,214,-152,-169,-245,59,262,-608,297,4,860,-98,-162,-56,204,-334,-404,-893,-14,-8,217,-184,-92,-456,-66,-79,-555,-153,387,-354,545,652,209,228,-524,133,-88,-396,-396,-216,631,328,-476,-132,-336,-37,488,286,435,-706,-162,702,224,-43,-184,280,383,42,-477,-211,264,-259,332,-527,35,-404,293,355,113,29,583,-183,339,173,-79,-422,655,-858,-54,59,-224,-334,221,276,908,803,-80,42,-428,467,822,755,-495,-11,59,182,290,67,-140,57,-560,-625,-155,619,-742,-884,98,-320,690,-677,551,-7,225,158,-175,-413,20,-199,77,283,-434,-923,221,50,174,-283,687,-428,-179,99,71,385,298,-63,-337,-139,-626,-303,-712,471,202,-105,306,-312,-50,-221,-6,2,121,-193,-66,-114,420,-696,41,-303,-288,598,-528,-62,468,-204,6,448,705,836,128,-457,-97,457,-854,-697,-97,3,-256,-42,-377,79,-9,522,35,663,-52,-255,815,-597,625,786,62,304,4,361,-408,-91,-575,-896,-196,-641,92,226,-139,256,513,160,-81,-271,508,405,-42,221,81,-70,193,230,158,-396,-33,191,-186,106,57,-471,-690,-87,80,-625,209,-423,-316,419,428,221,686,368,60,-48,229,751,-557,-372,-56,-205,32,395,-78,-490,317,128,75,-405,-952,331,-455,539,68,-415,62,777,-610,121,-47,7,-430,-102,276,568,459,-847,382,-451,-584,149,95,-239,786,-324,553,31,257,549,178,-536,-35,-940,-115,-530,-753,-447,431,588,-185,-421,-445,-108,-133,94,15,105,328,442,700,-60,-719,-379,-668,400,-214,-738,53,368,313,-319,-96,-587,-192,-595,261,-295,-43,459,45,351,124,812,344,-223,25,-221,582,202,-72,-180,295,275,933,-425,220,-104,174,336,372,129,-196,111,665,266,183,-368,938,420,625,500,-400,-742,-106,319,-150,-297,516,593,-847,-676,341,-817,262,-132,824,-7,-136,400,638,-141,257,179,350,76,-177,384,-590,739,-428,-167,-272,590,-305,-185,132,-222,256,-498,-285,-33,561,-266,-1,674,58,708,-482,-21,497,673,98,-466,122,-434,99,306,481,343,-118,-194,465,-18,438,-720,138,-588,-577,-506};
		//int[] arr = {6, 10, 3, -4, 1, -6, 9};
		int[] arr = {0, -4, -1, -4, -2, -3, 2};
		//int[] arr = {-2, 0, 2, 2};
		System.out.printf("%s\n", findZeroSum(arr).toString());
		/*for (int i = 0; i < list1.size(); i++) {
			List l1 = list1.get(i);
			
			(int i = 0; i < list1.size(); i++) {
				System.out.printf("%d\n", l);
			}
		}*/
		
		/*String[] strArr = {"key1 abcd", "key2 zzz", "key1 hello", "key3 world", "key1 hello"};
		String[] newArr = solve(strArr);
		for(int j=0; j <newArr.length; j++) {
			System.out.println(newArr[j]);
		}
		
		fibonacci(3);
		System.out.println();
		System.out.printf("%d\n", bunnyEars2(2));
		System.out.println(printStr("abcd"));*/
		/*int cnts = countX("hihih");
		System.out.printf("%d\n", cnts);
		System.out.println(palindrome("never a foot too far, even."));*/
		/*int[] arr1 = {2, 4, 6};
		boolean val = groupSum(0, arr1, 10);
		System.out.printf("%b\n", val);*/
		
	}
}
